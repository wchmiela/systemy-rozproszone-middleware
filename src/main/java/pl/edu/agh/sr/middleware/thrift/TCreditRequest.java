/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pl.edu.agh.sr.middleware.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-13")
public class TCreditRequest implements org.apache.thrift.TBase<TCreditRequest, TCreditRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TCreditRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCreditRequest");

  private static final org.apache.thrift.protocol.TField T_CLIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("tClient", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("days", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCreditRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCreditRequestTupleSchemeFactory();

  public TClient tClient; // required
  public java.lang.String currency; // required
  public int money; // required
  public int days; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    T_CLIENT((short)1, "tClient"),
    CURRENCY((short)2, "currency"),
    MONEY((short)3, "money"),
    DAYS((short)4, "days");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // T_CLIENT
          return T_CLIENT;
        case 2: // CURRENCY
          return CURRENCY;
        case 3: // MONEY
          return MONEY;
        case 4: // DAYS
          return DAYS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MONEY_ISSET_ID = 0;
  private static final int __DAYS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.T_CLIENT, new org.apache.thrift.meta_data.FieldMetaData("tClient", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TClient.class)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DAYS, new org.apache.thrift.meta_data.FieldMetaData("days", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCreditRequest.class, metaDataMap);
  }

  public TCreditRequest() {
  }

  public TCreditRequest(
    TClient tClient,
    java.lang.String currency,
    int money,
    int days)
  {
    this();
    this.tClient = tClient;
    this.currency = currency;
    this.money = money;
    setMoneyIsSet(true);
    this.days = days;
    setDaysIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCreditRequest(TCreditRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTClient()) {
      this.tClient = new TClient(other.tClient);
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.money = other.money;
    this.days = other.days;
  }

  public TCreditRequest deepCopy() {
    return new TCreditRequest(this);
  }

  @Override
  public void clear() {
    this.tClient = null;
    this.currency = null;
    setMoneyIsSet(false);
    this.money = 0;
    setDaysIsSet(false);
    this.days = 0;
  }

  public TClient getTClient() {
    return this.tClient;
  }

  public TCreditRequest setTClient(TClient tClient) {
    this.tClient = tClient;
    return this;
  }

  public void unsetTClient() {
    this.tClient = null;
  }

  /** Returns true if field tClient is set (has been assigned a value) and false otherwise */
  public boolean isSetTClient() {
    return this.tClient != null;
  }

  public void setTClientIsSet(boolean value) {
    if (!value) {
      this.tClient = null;
    }
  }

  public java.lang.String getCurrency() {
    return this.currency;
  }

  public TCreditRequest setCurrency(java.lang.String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public int getMoney() {
    return this.money;
  }

  public TCreditRequest setMoney(int money) {
    this.money = money;
    setMoneyIsSet(true);
    return this;
  }

  public void unsetMoney() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  /** Returns true if field money is set (has been assigned a value) and false otherwise */
  public boolean isSetMoney() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  public void setMoneyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MONEY_ISSET_ID, value);
  }

  public int getDays() {
    return this.days;
  }

  public TCreditRequest setDays(int days) {
    this.days = days;
    setDaysIsSet(true);
    return this;
  }

  public void unsetDays() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DAYS_ISSET_ID);
  }

  /** Returns true if field days is set (has been assigned a value) and false otherwise */
  public boolean isSetDays() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DAYS_ISSET_ID);
  }

  public void setDaysIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DAYS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case T_CLIENT:
      if (value == null) {
        unsetTClient();
      } else {
        setTClient((TClient)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((java.lang.String)value);
      }
      break;

    case MONEY:
      if (value == null) {
        unsetMoney();
      } else {
        setMoney((java.lang.Integer)value);
      }
      break;

    case DAYS:
      if (value == null) {
        unsetDays();
      } else {
        setDays((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case T_CLIENT:
      return getTClient();

    case CURRENCY:
      return getCurrency();

    case MONEY:
      return getMoney();

    case DAYS:
      return getDays();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case T_CLIENT:
      return isSetTClient();
    case CURRENCY:
      return isSetCurrency();
    case MONEY:
      return isSetMoney();
    case DAYS:
      return isSetDays();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TCreditRequest)
      return this.equals((TCreditRequest)that);
    return false;
  }

  public boolean equals(TCreditRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tClient = true && this.isSetTClient();
    boolean that_present_tClient = true && that.isSetTClient();
    if (this_present_tClient || that_present_tClient) {
      if (!(this_present_tClient && that_present_tClient))
        return false;
      if (!this.tClient.equals(that.tClient))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_money = true;
    boolean that_present_money = true;
    if (this_present_money || that_present_money) {
      if (!(this_present_money && that_present_money))
        return false;
      if (this.money != that.money)
        return false;
    }

    boolean this_present_days = true;
    boolean that_present_days = true;
    if (this_present_days || that_present_days) {
      if (!(this_present_days && that_present_days))
        return false;
      if (this.days != that.days)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTClient()) ? 131071 : 524287);
    if (isSetTClient())
      hashCode = hashCode * 8191 + tClient.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrency()) ? 131071 : 524287);
    if (isSetCurrency())
      hashCode = hashCode * 8191 + currency.hashCode();

    hashCode = hashCode * 8191 + money;

    hashCode = hashCode * 8191 + days;

    return hashCode;
  }

  @Override
  public int compareTo(TCreditRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTClient()).compareTo(other.isSetTClient());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTClient()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tClient, other.tClient);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDays()).compareTo(other.isSetDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.days, other.days);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCreditRequest(");
    boolean first = true;

    sb.append("tClient:");
    if (this.tClient == null) {
      sb.append("null");
    } else {
      sb.append(this.tClient);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("money:");
    sb.append(this.money);
    first = false;
    if (!first) sb.append(", ");
    sb.append("days:");
    sb.append(this.days);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tClient == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tClient' was not present! Struct: " + toString());
    }
    if (currency == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'currency' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'money' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'days' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (tClient != null) {
      tClient.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCreditRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCreditRequestStandardScheme getScheme() {
      return new TCreditRequestStandardScheme();
    }
  }

  private static class TCreditRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCreditRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCreditRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // T_CLIENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tClient = new TClient();
              struct.tClient.read(iprot);
              struct.setTClientIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.money = iprot.readI32();
              struct.setMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.days = iprot.readI32();
              struct.setDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMoney()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'money' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDays()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'days' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCreditRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tClient != null) {
        oprot.writeFieldBegin(T_CLIENT_FIELD_DESC);
        struct.tClient.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.currency);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONEY_FIELD_DESC);
      oprot.writeI32(struct.money);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAYS_FIELD_DESC);
      oprot.writeI32(struct.days);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCreditRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCreditRequestTupleScheme getScheme() {
      return new TCreditRequestTupleScheme();
    }
  }

  private static class TCreditRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCreditRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCreditRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tClient.write(oprot);
      oprot.writeString(struct.currency);
      oprot.writeI32(struct.money);
      oprot.writeI32(struct.days);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCreditRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tClient = new TClient();
      struct.tClient.read(iprot);
      struct.setTClientIsSet(true);
      struct.currency = iprot.readString();
      struct.setCurrencyIsSet(true);
      struct.money = iprot.readI32();
      struct.setMoneyIsSet(true);
      struct.days = iprot.readI32();
      struct.setDaysIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

