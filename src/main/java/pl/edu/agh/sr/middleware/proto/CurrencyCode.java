// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: currencyservice.pl.edu.agh.sr.middleware.proto

package pl.edu.agh.sr.middleware.proto;

/**
 * Protobuf enum {@code CurrencyCode}
 */
public enum CurrencyCode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>USD = 0;</code>
   */
  USD(0),
  /**
   * <code>EUR = 1;</code>
   */
  EUR(1),
  /**
   * <code>CHF = 2;</code>
   */
  CHF(2),
  /**
   * <code>GBP = 3;</code>
   */
  GBP(3),
  /**
   * <code>PLN = 4;</code>
   */
  PLN(4),
  /**
   * <code>SEK = 5;</code>
   */
  SEK(5),
  /**
   * <code>RUB = 6;</code>
   */
  RUB(6),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>USD = 0;</code>
   */
  public static final int USD_VALUE = 0;
  /**
   * <code>EUR = 1;</code>
   */
  public static final int EUR_VALUE = 1;
  /**
   * <code>CHF = 2;</code>
   */
  public static final int CHF_VALUE = 2;
  /**
   * <code>GBP = 3;</code>
   */
  public static final int GBP_VALUE = 3;
  /**
   * <code>PLN = 4;</code>
   */
  public static final int PLN_VALUE = 4;
  /**
   * <code>SEK = 5;</code>
   */
  public static final int SEK_VALUE = 5;
  /**
   * <code>RUB = 6;</code>
   */
  public static final int RUB_VALUE = 6;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static CurrencyCode valueOf(int value) {
    return forNumber(value);
  }

  public static CurrencyCode forNumber(int value) {
    switch (value) {
      case 0: return USD;
      case 1: return EUR;
      case 2: return CHF;
      case 3: return GBP;
      case 4: return PLN;
      case 5: return SEK;
      case 6: return RUB;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<CurrencyCode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      CurrencyCode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<CurrencyCode>() {
          public CurrencyCode findValueByNumber(int number) {
            return CurrencyCode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return pl.edu.agh.sr.middleware.proto.CurrencyServiceProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final CurrencyCode[] VALUES = values();

  public static CurrencyCode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private CurrencyCode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:CurrencyCode)
}

