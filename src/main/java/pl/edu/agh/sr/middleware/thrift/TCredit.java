/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pl.edu.agh.sr.middleware.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-13")
public class TCredit implements org.apache.thrift.TBase<TCredit, TCredit._Fields>, java.io.Serializable, Cloneable, Comparable<TCredit> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCredit");

  private static final org.apache.thrift.protocol.TField T_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("tBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField T_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("tCode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EXCHANGE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeRate", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("days", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("interest", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCreditStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCreditTupleSchemeFactory();

  public TBank tBank; // required
  /**
   * 
   * @see TCurrencyCode
   */
  public TCurrencyCode tCode; // required
  public int money; // required
  public double exchangeRate; // required
  public int days; // required
  public double interest; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    T_BANK((short)1, "tBank"),
    /**
     * 
     * @see TCurrencyCode
     */
    T_CODE((short)2, "tCode"),
    MONEY((short)3, "money"),
    EXCHANGE_RATE((short)4, "exchangeRate"),
    DAYS((short)5, "days"),
    INTEREST((short)6, "interest");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // T_BANK
          return T_BANK;
        case 2: // T_CODE
          return T_CODE;
        case 3: // MONEY
          return MONEY;
        case 4: // EXCHANGE_RATE
          return EXCHANGE_RATE;
        case 5: // DAYS
          return DAYS;
        case 6: // INTEREST
          return INTEREST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MONEY_ISSET_ID = 0;
  private static final int __EXCHANGERATE_ISSET_ID = 1;
  private static final int __DAYS_ISSET_ID = 2;
  private static final int __INTEREST_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.T_BANK, new org.apache.thrift.meta_data.FieldMetaData("tBank", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBank.class)));
    tmpMap.put(_Fields.T_CODE, new org.apache.thrift.meta_data.FieldMetaData("tCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCurrencyCode.class)));
    tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCHANGE_RATE, new org.apache.thrift.meta_data.FieldMetaData("exchangeRate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DAYS, new org.apache.thrift.meta_data.FieldMetaData("days", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTEREST, new org.apache.thrift.meta_data.FieldMetaData("interest", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCredit.class, metaDataMap);
  }

  public TCredit() {
  }

  public TCredit(
    TBank tBank,
    TCurrencyCode tCode,
    int money,
    double exchangeRate,
    int days,
    double interest)
  {
    this();
    this.tBank = tBank;
    this.tCode = tCode;
    this.money = money;
    setMoneyIsSet(true);
    this.exchangeRate = exchangeRate;
    setExchangeRateIsSet(true);
    this.days = days;
    setDaysIsSet(true);
    this.interest = interest;
    setInterestIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCredit(TCredit other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTBank()) {
      this.tBank = new TBank(other.tBank);
    }
    if (other.isSetTCode()) {
      this.tCode = other.tCode;
    }
    this.money = other.money;
    this.exchangeRate = other.exchangeRate;
    this.days = other.days;
    this.interest = other.interest;
  }

  public TCredit deepCopy() {
    return new TCredit(this);
  }

  @Override
  public void clear() {
    this.tBank = null;
    this.tCode = null;
    setMoneyIsSet(false);
    this.money = 0;
    setExchangeRateIsSet(false);
    this.exchangeRate = 0.0;
    setDaysIsSet(false);
    this.days = 0;
    setInterestIsSet(false);
    this.interest = 0.0;
  }

  public TBank getTBank() {
    return this.tBank;
  }

  public TCredit setTBank(TBank tBank) {
    this.tBank = tBank;
    return this;
  }

  public void unsetTBank() {
    this.tBank = null;
  }

  /** Returns true if field tBank is set (has been assigned a value) and false otherwise */
  public boolean isSetTBank() {
    return this.tBank != null;
  }

  public void setTBankIsSet(boolean value) {
    if (!value) {
      this.tBank = null;
    }
  }

  /**
   * 
   * @see TCurrencyCode
   */
  public TCurrencyCode getTCode() {
    return this.tCode;
  }

  /**
   * 
   * @see TCurrencyCode
   */
  public TCredit setTCode(TCurrencyCode tCode) {
    this.tCode = tCode;
    return this;
  }

  public void unsetTCode() {
    this.tCode = null;
  }

  /** Returns true if field tCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTCode() {
    return this.tCode != null;
  }

  public void setTCodeIsSet(boolean value) {
    if (!value) {
      this.tCode = null;
    }
  }

  public int getMoney() {
    return this.money;
  }

  public TCredit setMoney(int money) {
    this.money = money;
    setMoneyIsSet(true);
    return this;
  }

  public void unsetMoney() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  /** Returns true if field money is set (has been assigned a value) and false otherwise */
  public boolean isSetMoney() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  public void setMoneyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MONEY_ISSET_ID, value);
  }

  public double getExchangeRate() {
    return this.exchangeRate;
  }

  public TCredit setExchangeRate(double exchangeRate) {
    this.exchangeRate = exchangeRate;
    setExchangeRateIsSet(true);
    return this;
  }

  public void unsetExchangeRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXCHANGERATE_ISSET_ID);
  }

  /** Returns true if field exchangeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXCHANGERATE_ISSET_ID);
  }

  public void setExchangeRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXCHANGERATE_ISSET_ID, value);
  }

  public int getDays() {
    return this.days;
  }

  public TCredit setDays(int days) {
    this.days = days;
    setDaysIsSet(true);
    return this;
  }

  public void unsetDays() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DAYS_ISSET_ID);
  }

  /** Returns true if field days is set (has been assigned a value) and false otherwise */
  public boolean isSetDays() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DAYS_ISSET_ID);
  }

  public void setDaysIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DAYS_ISSET_ID, value);
  }

  public double getInterest() {
    return this.interest;
  }

  public TCredit setInterest(double interest) {
    this.interest = interest;
    setInterestIsSet(true);
    return this;
  }

  public void unsetInterest() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  /** Returns true if field interest is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  public void setInterestIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTEREST_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case T_BANK:
      if (value == null) {
        unsetTBank();
      } else {
        setTBank((TBank)value);
      }
      break;

    case T_CODE:
      if (value == null) {
        unsetTCode();
      } else {
        setTCode((TCurrencyCode)value);
      }
      break;

    case MONEY:
      if (value == null) {
        unsetMoney();
      } else {
        setMoney((java.lang.Integer)value);
      }
      break;

    case EXCHANGE_RATE:
      if (value == null) {
        unsetExchangeRate();
      } else {
        setExchangeRate((java.lang.Double)value);
      }
      break;

    case DAYS:
      if (value == null) {
        unsetDays();
      } else {
        setDays((java.lang.Integer)value);
      }
      break;

    case INTEREST:
      if (value == null) {
        unsetInterest();
      } else {
        setInterest((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case T_BANK:
      return getTBank();

    case T_CODE:
      return getTCode();

    case MONEY:
      return getMoney();

    case EXCHANGE_RATE:
      return getExchangeRate();

    case DAYS:
      return getDays();

    case INTEREST:
      return getInterest();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case T_BANK:
      return isSetTBank();
    case T_CODE:
      return isSetTCode();
    case MONEY:
      return isSetMoney();
    case EXCHANGE_RATE:
      return isSetExchangeRate();
    case DAYS:
      return isSetDays();
    case INTEREST:
      return isSetInterest();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TCredit)
      return this.equals((TCredit)that);
    return false;
  }

  public boolean equals(TCredit that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tBank = true && this.isSetTBank();
    boolean that_present_tBank = true && that.isSetTBank();
    if (this_present_tBank || that_present_tBank) {
      if (!(this_present_tBank && that_present_tBank))
        return false;
      if (!this.tBank.equals(that.tBank))
        return false;
    }

    boolean this_present_tCode = true && this.isSetTCode();
    boolean that_present_tCode = true && that.isSetTCode();
    if (this_present_tCode || that_present_tCode) {
      if (!(this_present_tCode && that_present_tCode))
        return false;
      if (!this.tCode.equals(that.tCode))
        return false;
    }

    boolean this_present_money = true;
    boolean that_present_money = true;
    if (this_present_money || that_present_money) {
      if (!(this_present_money && that_present_money))
        return false;
      if (this.money != that.money)
        return false;
    }

    boolean this_present_exchangeRate = true;
    boolean that_present_exchangeRate = true;
    if (this_present_exchangeRate || that_present_exchangeRate) {
      if (!(this_present_exchangeRate && that_present_exchangeRate))
        return false;
      if (this.exchangeRate != that.exchangeRate)
        return false;
    }

    boolean this_present_days = true;
    boolean that_present_days = true;
    if (this_present_days || that_present_days) {
      if (!(this_present_days && that_present_days))
        return false;
      if (this.days != that.days)
        return false;
    }

    boolean this_present_interest = true;
    boolean that_present_interest = true;
    if (this_present_interest || that_present_interest) {
      if (!(this_present_interest && that_present_interest))
        return false;
      if (this.interest != that.interest)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTBank()) ? 131071 : 524287);
    if (isSetTBank())
      hashCode = hashCode * 8191 + tBank.hashCode();

    hashCode = hashCode * 8191 + ((isSetTCode()) ? 131071 : 524287);
    if (isSetTCode())
      hashCode = hashCode * 8191 + tCode.getValue();

    hashCode = hashCode * 8191 + money;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(exchangeRate);

    hashCode = hashCode * 8191 + days;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(interest);

    return hashCode;
  }

  @Override
  public int compareTo(TCredit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTBank()).compareTo(other.isSetTBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tBank, other.tBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTCode()).compareTo(other.isSetTCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tCode, other.tCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExchangeRate()).compareTo(other.isSetExchangeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeRate, other.exchangeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDays()).compareTo(other.isSetDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.days, other.days);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInterest()).compareTo(other.isSetInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest, other.interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCredit(");
    boolean first = true;

    sb.append("tBank:");
    if (this.tBank == null) {
      sb.append("null");
    } else {
      sb.append(this.tBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tCode:");
    if (this.tCode == null) {
      sb.append("null");
    } else {
      sb.append(this.tCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("money:");
    sb.append(this.money);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeRate:");
    sb.append(this.exchangeRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("days:");
    sb.append(this.days);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest:");
    sb.append(this.interest);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tBank == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tBank' was not present! Struct: " + toString());
    }
    if (tCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tCode' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'money' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'exchangeRate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'days' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'interest' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (tBank != null) {
      tBank.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCreditStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCreditStandardScheme getScheme() {
      return new TCreditStandardScheme();
    }
  }

  private static class TCreditStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCredit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCredit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // T_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tBank = new TBank();
              struct.tBank.read(iprot);
              struct.setTBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // T_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tCode = pl.edu.agh.sr.middleware.thrift.TCurrencyCode.findByValue(iprot.readI32());
              struct.setTCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.money = iprot.readI32();
              struct.setMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXCHANGE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchangeRate = iprot.readDouble();
              struct.setExchangeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.days = iprot.readI32();
              struct.setDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interest = iprot.readDouble();
              struct.setInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMoney()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'money' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetExchangeRate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'exchangeRate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDays()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'days' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInterest()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'interest' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCredit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tBank != null) {
        oprot.writeFieldBegin(T_BANK_FIELD_DESC);
        struct.tBank.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tCode != null) {
        oprot.writeFieldBegin(T_CODE_FIELD_DESC);
        oprot.writeI32(struct.tCode.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONEY_FIELD_DESC);
      oprot.writeI32(struct.money);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCHANGE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.exchangeRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAYS_FIELD_DESC);
      oprot.writeI32(struct.days);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.interest);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCreditTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCreditTupleScheme getScheme() {
      return new TCreditTupleScheme();
    }
  }

  private static class TCreditTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCredit> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCredit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tBank.write(oprot);
      oprot.writeI32(struct.tCode.getValue());
      oprot.writeI32(struct.money);
      oprot.writeDouble(struct.exchangeRate);
      oprot.writeI32(struct.days);
      oprot.writeDouble(struct.interest);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCredit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tBank = new TBank();
      struct.tBank.read(iprot);
      struct.setTBankIsSet(true);
      struct.tCode = pl.edu.agh.sr.middleware.thrift.TCurrencyCode.findByValue(iprot.readI32());
      struct.setTCodeIsSet(true);
      struct.money = iprot.readI32();
      struct.setMoneyIsSet(true);
      struct.exchangeRate = iprot.readDouble();
      struct.setExchangeRateIsSet(true);
      struct.days = iprot.readI32();
      struct.setDaysIsSet(true);
      struct.interest = iprot.readDouble();
      struct.setInterestIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

