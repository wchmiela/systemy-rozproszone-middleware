/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pl.edu.agh.sr.middleware.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-13")
public class TCheckMessage implements org.apache.thrift.TBase<TCheckMessage, TCheckMessage._Fields>, java.io.Serializable, Cloneable, Comparable<TCheckMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCheckMessage");

  private static final org.apache.thrift.protocol.TField T_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("tBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCheckMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCheckMessageTupleSchemeFactory();

  public TBank tBank; // required
  public java.lang.String balance; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    T_BANK((short)1, "tBank"),
    BALANCE((short)2, "balance");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // T_BANK
          return T_BANK;
        case 2: // BALANCE
          return BALANCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.T_BANK, new org.apache.thrift.meta_data.FieldMetaData("tBank", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBank.class)));
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCheckMessage.class, metaDataMap);
  }

  public TCheckMessage() {
  }

  public TCheckMessage(
    TBank tBank,
    java.lang.String balance)
  {
    this();
    this.tBank = tBank;
    this.balance = balance;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCheckMessage(TCheckMessage other) {
    if (other.isSetTBank()) {
      this.tBank = new TBank(other.tBank);
    }
    if (other.isSetBalance()) {
      this.balance = other.balance;
    }
  }

  public TCheckMessage deepCopy() {
    return new TCheckMessage(this);
  }

  @Override
  public void clear() {
    this.tBank = null;
    this.balance = null;
  }

  public TBank getTBank() {
    return this.tBank;
  }

  public TCheckMessage setTBank(TBank tBank) {
    this.tBank = tBank;
    return this;
  }

  public void unsetTBank() {
    this.tBank = null;
  }

  /** Returns true if field tBank is set (has been assigned a value) and false otherwise */
  public boolean isSetTBank() {
    return this.tBank != null;
  }

  public void setTBankIsSet(boolean value) {
    if (!value) {
      this.tBank = null;
    }
  }

  public java.lang.String getBalance() {
    return this.balance;
  }

  public TCheckMessage setBalance(java.lang.String balance) {
    this.balance = balance;
    return this;
  }

  public void unsetBalance() {
    this.balance = null;
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return this.balance != null;
  }

  public void setBalanceIsSet(boolean value) {
    if (!value) {
      this.balance = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case T_BANK:
      if (value == null) {
        unsetTBank();
      } else {
        setTBank((TBank)value);
      }
      break;

    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case T_BANK:
      return getTBank();

    case BALANCE:
      return getBalance();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case T_BANK:
      return isSetTBank();
    case BALANCE:
      return isSetBalance();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TCheckMessage)
      return this.equals((TCheckMessage)that);
    return false;
  }

  public boolean equals(TCheckMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tBank = true && this.isSetTBank();
    boolean that_present_tBank = true && that.isSetTBank();
    if (this_present_tBank || that_present_tBank) {
      if (!(this_present_tBank && that_present_tBank))
        return false;
      if (!this.tBank.equals(that.tBank))
        return false;
    }

    boolean this_present_balance = true && this.isSetBalance();
    boolean that_present_balance = true && that.isSetBalance();
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (!this.balance.equals(that.balance))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTBank()) ? 131071 : 524287);
    if (isSetTBank())
      hashCode = hashCode * 8191 + tBank.hashCode();

    hashCode = hashCode * 8191 + ((isSetBalance()) ? 131071 : 524287);
    if (isSetBalance())
      hashCode = hashCode * 8191 + balance.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TCheckMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTBank()).compareTo(other.isSetTBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tBank, other.tBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCheckMessage(");
    boolean first = true;

    sb.append("tBank:");
    if (this.tBank == null) {
      sb.append("null");
    } else {
      sb.append(this.tBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("balance:");
    if (this.balance == null) {
      sb.append("null");
    } else {
      sb.append(this.balance);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tBank == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tBank' was not present! Struct: " + toString());
    }
    if (balance == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'balance' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (tBank != null) {
      tBank.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCheckMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCheckMessageStandardScheme getScheme() {
      return new TCheckMessageStandardScheme();
    }
  }

  private static class TCheckMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCheckMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCheckMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // T_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tBank = new TBank();
              struct.tBank.read(iprot);
              struct.setTBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.balance = iprot.readString();
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCheckMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tBank != null) {
        oprot.writeFieldBegin(T_BANK_FIELD_DESC);
        struct.tBank.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.balance != null) {
        oprot.writeFieldBegin(BALANCE_FIELD_DESC);
        oprot.writeString(struct.balance);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCheckMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCheckMessageTupleScheme getScheme() {
      return new TCheckMessageTupleScheme();
    }
  }

  private static class TCheckMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCheckMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCheckMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tBank.write(oprot);
      oprot.writeString(struct.balance);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCheckMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tBank = new TBank();
      struct.tBank.read(iprot);
      struct.setTBankIsSet(true);
      struct.balance = iprot.readString();
      struct.setBalanceIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

